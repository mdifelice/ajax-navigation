(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
module.exports = {
	delegateEvent: function( eventName, selector, listener ) {
		var elements = document.querySelectorAll( selector );
		var callback = function( e ) {
			if ( listener.bind ) {
				( listener.bind( this ) )( e );
			}
		};

		elements.forEach( function( element ) {
			element.addEventListener( eventName, callback );
		} );

		if ( window.MutationObserver ) {
			var mutationObserver = new MutationObserver( function( mutations ) {
				mutations.forEach( function( mutation ) {
					if ( 'childList' === mutation.type ) {
						mutation.addedNodes.forEach( function( node ) {
							if ( node.matches && node.matches( selector ) ) {
								node.addEventListener( eventName, callback );
							} else if( node.querySelectorAll ) {
								var elements = node.querySelectorAll( selector );

								elements.forEach( function( element ) {
									element.addEventListener( eventName, callback );
								} );
							}
						} );
					}
				} );
			} );

			mutationObserver.observe( document.body, { childList: true, subtree: true } );
		}
	}
};

},{}],2:[function(require,module,exports){
( function() {
	require( './event.js' );

	var init = function() {
		var cacheTimeout = parseInt( ajax_navigation.cache_timeout ) || 0;
		var container    = document.body;
		var currentKey   = getKey( document.location.href );

		window.history.replaceState(
			{
				key: currentKey,
			},
			document.title,
			document.location.href
		);

		//setQueue( ... );

		event.delegateEvent( 'click', 'a', function( e ) {
		} );

		window.addEventListener( 'popstate', function( e ) {
			var key = e.state && e.state.key ? e.state.key : null;

			if ( key ) {
				setContent( key, false );
			}
		} );
	};

	if ( 'undefined' !== typeof window.history.pushState() &&
	     'undefined' !== typeof window.ajax_navigation ) {
		if ( 'complete' === document.readyState || 'interactive' === document.readyState ) {
			init();
		} else {
			document.addEventListener( 'DOMContentLoaded', init );
		}
	}
} )();

},{"./event.js":1}]},{},[2]);
